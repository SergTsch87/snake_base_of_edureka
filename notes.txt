!!!
Перед тим, як перенести усю гру до Django, - треба перевести увесь код в ООП


!!!
+ Вилучи зайвий код.
+0.5 Перейменуй, та вилучи зайві змінні (котрі лишились зі старого коду).
+0.5 Попроси у ChatGPT код рев'ю.
Реалізуй Павзу та Відсутність меж (Гіперплощину).
Переведи увесь код в ООП.
Перенеси усю гру до Django.


# Додатки до гри:
# +0,8    Намалюй текстову інформацію (бали та час) нагорі, над ігровим полем

# ?.. Чи вона потрібна?..    Нова система координат

#  +1   Зроби ефективне створення нової їжі за допомогою available_positions
    # Треба змінити код ф-ції random_target() у food.py

#     Перешкоди на полі:
#       намальовані межі поля
#       лабіринт
#       випадкові блоки, стіни
#       "кораблі" з гри "морський бій"

#   !!!    відсутність меж, - коли Змійка виходить з одної стіни, а виходить з протилежної стіни
# Зроби рівень, в якому поле є гіперплощиною (як у грі в Nokia), - де Змійка вільно переходить межу поля, зявляючись на її протилежному боці

# +1    Звуки до гри: лишилось додати самі файли, з авторськими правами тощо. Here: https://opensource.com/article/20/9/add-sound-python-game

#   +0.5  Павза
#     Система рівнів
#     Дошка досягнень (багатокористувацька гра)
#     Налаштування для гри
#     Дизайн у стилі Nokia
#     ООП


# Функції з розділу "Графіка":
#     create_grid_surface
#     snake_score
#     display_info
#     draw_snake
#     draw_food
#     msg_lost
#     gameover_anim
#     fade_to_black

# Функції з розділу "Логіка":
#     add_head_to_body
#     trim_snake_tail
#     self_collision
#     get_coord_new_food
#     check_collision_with_walls
#     move_snake_head
#     coords_center_rect


# Пояснення до функцій:


# +
# Ініціація
    # config.py
    # from config import PARAMS

# +
# графіка
# інформативність
    # graphic.py
    # import graphic
        # create_grid_surface
        # draw_grid
        # snake_score
        # display_info
        # draw_snake
        # draw_food
        # msg_lost
        # gameover_anim
        # fade_to_black
        # coords_center_rect

#     create_grid_surface
#         Використання pygame.Surface для збереження сітки ігрового поля
#         Це зменшить кількість малювань і збільшить продуктивність.

#     snake_score
#         Показує на ігровому полі к-сть балів

#     display_info
#         Показує на ігровому полі к-сть балів та швидкість Змійки
    
#     draw_snake
#         Малює Змійку, дістаючи координати кожного її елемента

#     draw_food
#         Малює квадратик їжі за заданими координатами (food_x, food_y)

#     msg_lost
#         Відображає повідомлення наприкінці гри

#     gameover_anim
#     fade_to_black
#         Функції завершення гри.
#         Кожна з них має цикл for, та часові павзи: time.sleep та time.delay

#     draw_grid
#         Просто блітимо вже намальований grid_surface на екран

#     coords_center_rect
#         Буде використовуватись для повернення координат центру прямокутника, -
#         для полегшення переходу до іншої системи координат



# +
# обробка вводу
# input_handle.py
#     process_endgame_input
#     gameover_logic
#     game_continuation
#     control_snake_keys

#     process_endgame_input
#         Завершує / Призупиняє гру, повертаючи game_over_status, game_lost_state
#         Всередині себе має виклики функцій:
#             gameover_logic
#             game_continuation

#     gameover_logic
#         Обробляє натискання клавіші "q", (щоб потім, за цією клавішею, завершилась гра)
#         повертає game_over_status, game_lost_state

#     game_continuation
#         Обробляє натискання клавіші "c",  (щоб потім, за цією клавішею, поновилась гра)
#         Рекурсивно(!) запускає game_loop()...

#     control_snake_keys
#         Обробляє натискання клавіш-стрілок.
#         Повертає координати наступної клітинки для переміщення Змійки


# +
# зіткнення
# collisions.py
    # self_collision
    # check_collision_with_walls
    # stop_snake

#     self_collision
#         Перевірка на зіткнення Змійки з собою (голови з тулубом)

#     check_collision_with_walls
#         Перевірка на зіткнення Змійки (її голови) зі стіною

#     stop_snake
#         Функція зупинки змійки у момент зіткнення.
#         Ще треба буде її створити


# рух Змійки
# move.py
    # add_head_to_body
    # trim_snake_tail
    # move_snake_head
    # increm_len_snake

#     add_head_to_body
#         Додає нові координати (x1, y1) (і повертає їх) голови Змійки до snake_coord_lists.
#         Спершу то координати центру поля.
#         А в процесі руху Змійки, на кожному наступному кроці, вони стають координатами нового поля,
#         на яке перемістилась голова Змійки

#     trim_snake_tail
#         Скорочує хвіст Змійки, - прибирає останній елемент зі списку snake_coord_lists

#     move_snake_head
#         Щокроку змінює координати (x1, y1) (і повертає їх) голови Змійки.
#         На кожному наступному кроці, вони стають координатами нового поля,
#         на яке перемістилась голова Змійки

#     increm_len_snake
#         Збільшуємо довжину Змійки на 1


# Їжа
# food.py
#     get_coord_new_food
#         Щокроку змінює список available_positions згідно алгоритму, - щоб залишати тіко ті чарунки,
#         які вільні для створення їжі на них
#         Повертає int(food_x), int(food_y)



#     game_loop
#         Фактично, містить в собі усю гру (без деяких ініціацій)





# стани гри


# # Які функції виконують більше, ніж одну задачу:
#     game_loop
#         Фактично, містить в собі усю гру (без деяких ініціацій)


# # Які функції потребують оптимізації:
# #     create_grid_surface
# #         Містить два цикли for, - чи можна якось оптимізувати їх?..

    # get_coord_new_food
    #     Неправильно обчислює пару координат available_positions для їжі

    # game_continuation
    #     Містить в собі рекурсивний виклик game_loop

    # process_endgame_input
    #     Містить в собі game_continuation, яка у свою чергу виконує рекурсивний виклик game_loop

#     game_loop
#         Фактично, містить в собі усю гру (без деяких ініціацій)
        # Містить в собі process_endgame_input, яка має рекурсивний виклик game_loop



# А що, як змінити "систему координат" для Змійки?
# А саме - визначати координати кожної чарунки не за її кутами, а за її центром.
# Відповідно, у нових функціях (які потребують координати Змійки, їжі тощо)
# достатньо буде писати лише одну, а не дві, координати


#  Додаткові можливості для гри
    # Додати паузу: Можна додати можливість ставити гру на паузу,
    # щоб гравець міг зупинити гру та відновити її, натиснувши певну клавішу.

    # Система рівнів: Зробіть так, щоб зі зростанням довжини змійки
    # збільшувалась швидкість гри або складність.

    # Багатокористувацький режим: Додайте другий геймпад або клавіші для управління другою змійкою.
    
    # Реалізуйте систему досягнень: Додайте повідомлення гравцеві про досягнення,
    # як-от "Ви досягли рекорду!" або "Ваша змійка виросла на 50 ланок!".


# Ще поради щодо покращення гри:
#     Розділіть логіку та графіку через класи (Snake, Food, Game).
#     Оптимізуйте продуктивність через попереднє малювання сітки і рідкісні виклики pygame.display.update().
#     Впровадьте ООП для кращої структури коду.
#     Додайте нові функції (паузу, рівні складності, систему досягнень) для покращення геймплею.
#     Винесіть налаштування у конфігураційний файл.

# А ще ж можна автоматизувати гру (за допомогою AI та звичайних алгоритмів), пустивши Змійку у самостіну подорож!)

# Зроби аналіз:
# Чому витратив так багато часу на редагування кращого коду?
    # Не знав деяких різних речей
# Що саме робив неправильно з самого початку?
# Що саме слід робити з початку, щоб зберегти у подальшому купу свого часу, і не робити зайву справу з кодом?

# Збери усі цікаві коди до купи, в один файл

# У версії гри в Nokia, швидкість Змійки зростала після вдалого проходження поточного рівня складності.
# Там зростала лише кількість балів від спожитої їжі (звичайної, або спец).
# Під час появи спец їжі вмикався таймер.

# Намалюй текстову інформацію (бали та час) нагорі, над ігровим полем.

# !!!
# Помилка у грі:
# Іноді їжа малюється саме на тілі(!) змійки, й тому їжа не з'являється зразу
# (змійка може переміститись на кілька чарунок, перш ніж з її хвоста з'явиться їжа).
# Як бачу, помилка - в обчисленні випадкових координат нового шматка їжі.
# Це функція get_coord_new_food

# Зроби дизайн гри, як в Nokia
# To search:
#     mobile game snake on nokia

# Об'єднай ці дві функції в одну
# snake_score та display_info

# 0) Додай від'ємний відлік часу (поки є спец їжа) на екран
# 0) - Прибрати усі змінні params["name"]
  # 1) Написати функції:
# для визначення швидкості
# для визначення балів / очок ( 1 бал - за одну їжу; 10 балів - за спец їжу )
# для зупинки Змійки (в момент зіткнення)
# - 2) Створити нові функції
# - 3) Змінити керування Змійкою клавішами
# - 4) Змінити код відповідно до нового алгоритму (та перевірити, наскільки цей алгоритм відповідає правилам гри Змійка)
# 5) - Прибрати зайві коментарі
# 6) - Розділи графіку та логіку

# Що запропонував ChatGPT:

# initialize_game()

# while True:
#     handle_events()
#     add_head_to_body()
#     collision = check_collisions()
#     if collision:
#         game_over()
#         break
#     else:
#         draw_game()
        
#         if not food_generated:
#             generate_food()

#     continue

# (x1, y1) - координати голови змійки
# (x1_change, y1_change) - відповідні осьові зміни руху змійки (які задають напрям руху голови змійки)

# to-do list:
    # ! Ще цікаво навчити змійку самостійно заповнювати усе поле собою
    # під час поступового зростання (з допомогою машинного навчання)
    
    # 1) Коли змійка врізається в себе, чи у межу поля, - вона повинна зупинятись,
    # міняти колір тощо, - але аж ніяк не продовжувати рух до повного завершення програми
    # - 1) Додати if name == main
    # - 2) - Додати сітку для поля
    # 3) Намалювати рамку для поля (створив нову гілку - add_frame_thickness)
        # 4) Відобразити швидкість змійки на екран
    # - 5) Коли змійці задаємо напрям, протилежний до її поточного руху, - тоді:
    #   а) Якщо довжина змійки = 1:
    #        змійка просто зупиняється.
    #   б) Якщо довжина змійки > 1:
    #        гра завершується (так, наче змійка "наїхала" на саму себе)
        # Але ж, так не повинно бути!..
        # Змійка просто повинна продовжувати рухатись у своєму поточному напрямку
    # 6) Розбити код на функції
    # 7) Використати ООП